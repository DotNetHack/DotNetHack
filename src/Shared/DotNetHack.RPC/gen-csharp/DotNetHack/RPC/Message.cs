/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace DotNetHack.RPC
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Message : TBase
  {
    private long _sequence;
    private string _text;
    private MessageType _messageType;

    public long Sequence
    {
      get
      {
        return _sequence;
      }
      set
      {
        __isset.sequence = true;
        this._sequence = value;
      }
    }

    public string Text
    {
      get
      {
        return _text;
      }
      set
      {
        __isset.text = true;
        this._text = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MessageType"/>
    /// </summary>
    public MessageType MessageType
    {
      get
      {
        return _messageType;
      }
      set
      {
        __isset.messageType = true;
        this._messageType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sequence;
      public bool text;
      public bool messageType;
    }

    public Message() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Sequence = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              MessageType = (MessageType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Message");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sequence) {
        field.Name = "sequence";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Sequence);
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      if (__isset.messageType) {
        field.Name = "messageType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)MessageType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Message(");
      sb.Append("Sequence: ");
      sb.Append(Sequence);
      sb.Append(",Text: ");
      sb.Append(Text);
      sb.Append(",MessageType: ");
      sb.Append(MessageType);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
