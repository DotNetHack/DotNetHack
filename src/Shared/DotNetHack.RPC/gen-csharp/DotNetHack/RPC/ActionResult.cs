/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace DotNetHack.RPC
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ActionResult : TBase
  {
    private Session _session;
    private string _message;
    private Sound _sound;
    private GameState _gameState;

    public Session Session
    {
      get
      {
        return _session;
      }
      set
      {
        __isset.session = true;
        this._session = value;
      }
    }

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }

    public Sound Sound
    {
      get
      {
        return _sound;
      }
      set
      {
        __isset.sound = true;
        this._sound = value;
      }
    }

    public GameState GameState
    {
      get
      {
        return _gameState;
      }
      set
      {
        __isset.gameState = true;
        this._gameState = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session;
      public bool message;
      public bool sound;
      public bool gameState;
    }

    public ActionResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Session = new Session();
              Session.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Message = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Sound = new Sound();
              Sound.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              GameState = new GameState();
              GameState.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActionResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Session != null && __isset.session) {
        field.Name = "session";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Session.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Message != null && __isset.message) {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Message);
        oprot.WriteFieldEnd();
      }
      if (Sound != null && __isset.sound) {
        field.Name = "sound";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Sound.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (GameState != null && __isset.gameState) {
        field.Name = "gameState";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        GameState.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActionResult(");
      sb.Append("Session: ");
      sb.Append(Session== null ? "<null>" : Session.ToString());
      sb.Append(",Message: ");
      sb.Append(Message);
      sb.Append(",Sound: ");
      sb.Append(Sound== null ? "<null>" : Sound.ToString());
      sb.Append(",GameState: ");
      sb.Append(GameState== null ? "<null>" : GameState.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
