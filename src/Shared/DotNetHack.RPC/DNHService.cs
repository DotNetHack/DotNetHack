/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace DotNetHack.RPC
{
  public partial class DNHService {
    public interface Iface {
      Session BeginSession(string userName, string passwordHash);
      #if SILVERLIGHT
      IAsyncResult Begin_BeginSession(AsyncCallback callback, object state, string userName, string passwordHash);
      Session End_BeginSession(IAsyncResult asyncResult);
      #endif
      ActionResult Move(Session session, Direction direction);
      #if SILVERLIGHT
      IAsyncResult Begin_Move(AsyncCallback callback, object state, Session session, Direction direction);
      ActionResult End_Move(IAsyncResult asyncResult);
      #endif
      ActionResult Cast(Session session, Spell spell, TargetSelector target);
      #if SILVERLIGHT
      IAsyncResult Begin_Cast(AsyncCallback callback, object state, Session session, Spell spell, TargetSelector target);
      ActionResult End_Cast(IAsyncResult asyncResult);
      #endif
      ActionResult Quaff(Session session, TargetSelector target);
      #if SILVERLIGHT
      IAsyncResult Begin_Quaff(AsyncCallback callback, object state, Session session, TargetSelector target);
      ActionResult End_Quaff(IAsyncResult asyncResult);
      #endif
      ActionResult Wield(Session session, TargetSelector target);
      #if SILVERLIGHT
      IAsyncResult Begin_Wield(AsyncCallback callback, object state, Session session, TargetSelector target);
      ActionResult End_Wield(IAsyncResult asyncResult);
      #endif
      ActionResult Attack(Session session, TargetSelector target);
      #if SILVERLIGHT
      IAsyncResult Begin_Attack(AsyncCallback callback, object state, Session session, TargetSelector target);
      ActionResult End_Attack(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_BeginSession(AsyncCallback callback, object state, string userName, string passwordHash)
      {
        return send_BeginSession(callback, state, userName, passwordHash);
      }

      public Session End_BeginSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BeginSession();
      }

      #endif

      public Session BeginSession(string userName, string passwordHash)
      {
        #if !SILVERLIGHT
        send_BeginSession(userName, passwordHash);
        return recv_BeginSession();

        #else
        var asyncResult = Begin_BeginSession(null, null, userName, passwordHash);
        return End_BeginSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BeginSession(AsyncCallback callback, object state, string userName, string passwordHash)
      #else
      public void send_BeginSession(string userName, string passwordHash)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BeginSession", TMessageType.Call, seqid_));
        BeginSession_args args = new BeginSession_args();
        args.UserName = userName;
        args.PasswordHash = passwordHash;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Session recv_BeginSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BeginSession_result result = new BeginSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BeginSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Move(AsyncCallback callback, object state, Session session, Direction direction)
      {
        return send_Move(callback, state, session, direction);
      }

      public ActionResult End_Move(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Move();
      }

      #endif

      public ActionResult Move(Session session, Direction direction)
      {
        #if !SILVERLIGHT
        send_Move(session, direction);
        return recv_Move();

        #else
        var asyncResult = Begin_Move(null, null, session, direction);
        return End_Move(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Move(AsyncCallback callback, object state, Session session, Direction direction)
      #else
      public void send_Move(Session session, Direction direction)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Move", TMessageType.Call, seqid_));
        Move_args args = new Move_args();
        args.Session = session;
        args.Direction = direction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ActionResult recv_Move()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Move_result result = new Move_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Move failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Cast(AsyncCallback callback, object state, Session session, Spell spell, TargetSelector target)
      {
        return send_Cast(callback, state, session, spell, target);
      }

      public ActionResult End_Cast(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Cast();
      }

      #endif

      public ActionResult Cast(Session session, Spell spell, TargetSelector target)
      {
        #if !SILVERLIGHT
        send_Cast(session, spell, target);
        return recv_Cast();

        #else
        var asyncResult = Begin_Cast(null, null, session, spell, target);
        return End_Cast(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Cast(AsyncCallback callback, object state, Session session, Spell spell, TargetSelector target)
      #else
      public void send_Cast(Session session, Spell spell, TargetSelector target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Cast", TMessageType.Call, seqid_));
        Cast_args args = new Cast_args();
        args.Session = session;
        args.Spell = spell;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ActionResult recv_Cast()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Cast_result result = new Cast_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Cast failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Quaff(AsyncCallback callback, object state, Session session, TargetSelector target)
      {
        return send_Quaff(callback, state, session, target);
      }

      public ActionResult End_Quaff(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Quaff();
      }

      #endif

      public ActionResult Quaff(Session session, TargetSelector target)
      {
        #if !SILVERLIGHT
        send_Quaff(session, target);
        return recv_Quaff();

        #else
        var asyncResult = Begin_Quaff(null, null, session, target);
        return End_Quaff(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Quaff(AsyncCallback callback, object state, Session session, TargetSelector target)
      #else
      public void send_Quaff(Session session, TargetSelector target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Quaff", TMessageType.Call, seqid_));
        Quaff_args args = new Quaff_args();
        args.Session = session;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ActionResult recv_Quaff()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Quaff_result result = new Quaff_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Quaff failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Wield(AsyncCallback callback, object state, Session session, TargetSelector target)
      {
        return send_Wield(callback, state, session, target);
      }

      public ActionResult End_Wield(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Wield();
      }

      #endif

      public ActionResult Wield(Session session, TargetSelector target)
      {
        #if !SILVERLIGHT
        send_Wield(session, target);
        return recv_Wield();

        #else
        var asyncResult = Begin_Wield(null, null, session, target);
        return End_Wield(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Wield(AsyncCallback callback, object state, Session session, TargetSelector target)
      #else
      public void send_Wield(Session session, TargetSelector target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Wield", TMessageType.Call, seqid_));
        Wield_args args = new Wield_args();
        args.Session = session;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ActionResult recv_Wield()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Wield_result result = new Wield_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Wield failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Attack(AsyncCallback callback, object state, Session session, TargetSelector target)
      {
        return send_Attack(callback, state, session, target);
      }

      public ActionResult End_Attack(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Attack();
      }

      #endif

      public ActionResult Attack(Session session, TargetSelector target)
      {
        #if !SILVERLIGHT
        send_Attack(session, target);
        return recv_Attack();

        #else
        var asyncResult = Begin_Attack(null, null, session, target);
        return End_Attack(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Attack(AsyncCallback callback, object state, Session session, TargetSelector target)
      #else
      public void send_Attack(Session session, TargetSelector target)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Attack", TMessageType.Call, seqid_));
        Attack_args args = new Attack_args();
        args.Session = session;
        args.Target = target;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ActionResult recv_Attack()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Attack_result result = new Attack_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Attack failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["BeginSession"] = BeginSession_Process;
        processMap_["Move"] = Move_Process;
        processMap_["Cast"] = Cast_Process;
        processMap_["Quaff"] = Quaff_Process;
        processMap_["Wield"] = Wield_Process;
        processMap_["Attack"] = Attack_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void BeginSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BeginSession_args args = new BeginSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BeginSession_result result = new BeginSession_result();
        result.Success = iface_.BeginSession(args.UserName, args.PasswordHash);
        oprot.WriteMessageBegin(new TMessage("BeginSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Move_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Move_args args = new Move_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Move_result result = new Move_result();
        result.Success = iface_.Move(args.Session, args.Direction);
        oprot.WriteMessageBegin(new TMessage("Move", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Cast_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Cast_args args = new Cast_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Cast_result result = new Cast_result();
        result.Success = iface_.Cast(args.Session, args.Spell, args.Target);
        oprot.WriteMessageBegin(new TMessage("Cast", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Quaff_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Quaff_args args = new Quaff_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Quaff_result result = new Quaff_result();
        result.Success = iface_.Quaff(args.Session, args.Target);
        oprot.WriteMessageBegin(new TMessage("Quaff", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Wield_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Wield_args args = new Wield_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Wield_result result = new Wield_result();
        result.Success = iface_.Wield(args.Session, args.Target);
        oprot.WriteMessageBegin(new TMessage("Wield", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Attack_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Attack_args args = new Attack_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Attack_result result = new Attack_result();
        result.Success = iface_.Attack(args.Session, args.Target);
        oprot.WriteMessageBegin(new TMessage("Attack", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BeginSession_args : TBase
    {
      private string _userName;
      private string _passwordHash;

      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public string PasswordHash
      {
        get
        {
          return _passwordHash;
        }
        set
        {
          __isset.passwordHash = true;
          this._passwordHash = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userName;
        public bool passwordHash;
      }

      public BeginSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                PasswordHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BeginSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserName != null && __isset.userName) {
          field.Name = "userName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserName);
          oprot.WriteFieldEnd();
        }
        if (PasswordHash != null && __isset.passwordHash) {
          field.Name = "passwordHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PasswordHash);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BeginSession_args(");
        sb.Append("UserName: ");
        sb.Append(UserName);
        sb.Append(",PasswordHash: ");
        sb.Append(PasswordHash);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BeginSession_result : TBase
    {
      private Session _success;

      public Session Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BeginSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Session();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("BeginSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("BeginSession_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Move_args : TBase
    {
      private Session _session;
      private Direction _direction;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="Direction"/>
      /// </summary>
      public Direction Direction
      {
        get
        {
          return _direction;
        }
        set
        {
          __isset.direction = true;
          this._direction = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
        public bool direction;
      }

      public Move_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Direction = (Direction)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Move_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.direction) {
          field.Name = "direction";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Direction);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Move_args(");
        sb.Append("Session: ");
        sb.Append(Session== null ? "<null>" : Session.ToString());
        sb.Append(",Direction: ");
        sb.Append(Direction);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Move_result : TBase
    {
      private ActionResult _success;

      public ActionResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Move_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ActionResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Move_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Move_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Cast_args : TBase
    {
      private Session _session;
      private Spell _spell;
      private TargetSelector _target;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public Spell Spell
      {
        get
        {
          return _spell;
        }
        set
        {
          __isset.spell = true;
          this._spell = value;
        }
      }

      public TargetSelector Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
        public bool spell;
        public bool target;
      }

      public Cast_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Spell = new Spell();
                Spell.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Target = new TargetSelector();
                Target.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Cast_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Spell != null && __isset.spell) {
          field.Name = "spell";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Spell.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Target.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Cast_args(");
        sb.Append("Session: ");
        sb.Append(Session== null ? "<null>" : Session.ToString());
        sb.Append(",Spell: ");
        sb.Append(Spell== null ? "<null>" : Spell.ToString());
        sb.Append(",Target: ");
        sb.Append(Target== null ? "<null>" : Target.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Cast_result : TBase
    {
      private ActionResult _success;

      public ActionResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Cast_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ActionResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Cast_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Cast_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Quaff_args : TBase
    {
      private Session _session;
      private TargetSelector _target;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public TargetSelector Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
        public bool target;
      }

      public Quaff_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Target = new TargetSelector();
                Target.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Quaff_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Target.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Quaff_args(");
        sb.Append("Session: ");
        sb.Append(Session== null ? "<null>" : Session.ToString());
        sb.Append(",Target: ");
        sb.Append(Target== null ? "<null>" : Target.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Quaff_result : TBase
    {
      private ActionResult _success;

      public ActionResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Quaff_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ActionResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Quaff_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Quaff_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Wield_args : TBase
    {
      private Session _session;
      private TargetSelector _target;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public TargetSelector Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
        public bool target;
      }

      public Wield_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Target = new TargetSelector();
                Target.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Wield_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Target.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Wield_args(");
        sb.Append("Session: ");
        sb.Append(Session== null ? "<null>" : Session.ToString());
        sb.Append(",Target: ");
        sb.Append(Target== null ? "<null>" : Target.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Wield_result : TBase
    {
      private ActionResult _success;

      public ActionResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Wield_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ActionResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Wield_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Wield_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Attack_args : TBase
    {
      private Session _session;
      private TargetSelector _target;

      public Session Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public TargetSelector Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
        public bool target;
      }

      public Attack_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Session = new Session();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Target = new TargetSelector();
                Target.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Attack_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Target.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Attack_args(");
        sb.Append("Session: ");
        sb.Append(Session== null ? "<null>" : Session.ToString());
        sb.Append(",Target: ");
        sb.Append(Target== null ? "<null>" : Target.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Attack_result : TBase
    {
      private ActionResult _success;

      public ActionResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Attack_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ActionResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Attack_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Attack_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
