/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class DNHService {
  public interface Iface {
    int authenticate(string userName, string password);
    #if SILVERLIGHT
    IAsyncResult Begin_authenticate(AsyncCallback callback, object state, string userName, string password);
    int End_authenticate(IAsyncResult asyncResult);
    #endif
    void sendPacket(DNHPacket packet);
    #if SILVERLIGHT
    IAsyncResult Begin_sendPacket(AsyncCallback callback, object state, DNHPacket packet);
    void End_sendPacket(IAsyncResult asyncResult);
    #endif
    DNHPacket retrievePacket(int uid);
    #if SILVERLIGHT
    IAsyncResult Begin_retrievePacket(AsyncCallback callback, object state, int uid);
    DNHPacket End_retrievePacket(IAsyncResult asyncResult);
    #endif
  }

  public class Client : Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    
    #if SILVERLIGHT
    public IAsyncResult Begin_authenticate(AsyncCallback callback, object state, string userName, string password)
    {
      return send_authenticate(callback, state, userName, password);
    }

    public int End_authenticate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_authenticate();
    }

    #endif

    public int authenticate(string userName, string password)
    {
      #if !SILVERLIGHT
      send_authenticate(userName, password);
      return recv_authenticate();

      #else
      var asyncResult = Begin_authenticate(null, null, userName, password);
      return End_authenticate(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_authenticate(AsyncCallback callback, object state, string userName, string password)
    #else
    public void send_authenticate(string userName, string password)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("authenticate", TMessageType.Call, seqid_));
      authenticate_args args = new authenticate_args();
      args.UserName = userName;
      args.Password = password;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_authenticate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      authenticate_result result = new authenticate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticate failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_sendPacket(AsyncCallback callback, object state, DNHPacket packet)
    {
      return send_sendPacket(callback, state, packet);
    }

    public void End_sendPacket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendPacket();
    }

    #endif

    public void sendPacket(DNHPacket packet)
    {
      #if !SILVERLIGHT
      send_sendPacket(packet);
      recv_sendPacket();

      #else
      var asyncResult = Begin_sendPacket(null, null, packet);
      End_sendPacket(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendPacket(AsyncCallback callback, object state, DNHPacket packet)
    #else
    public void send_sendPacket(DNHPacket packet)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("sendPacket", TMessageType.Call, seqid_));
      sendPacket_args args = new sendPacket_args();
      args.Packet = packet;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_sendPacket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendPacket_result result = new sendPacket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_retrievePacket(AsyncCallback callback, object state, int uid)
    {
      return send_retrievePacket(callback, state, uid);
    }

    public DNHPacket End_retrievePacket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_retrievePacket();
    }

    #endif

    public DNHPacket retrievePacket(int uid)
    {
      #if !SILVERLIGHT
      send_retrievePacket(uid);
      return recv_retrievePacket();

      #else
      var asyncResult = Begin_retrievePacket(null, null, uid);
      return End_retrievePacket(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_retrievePacket(AsyncCallback callback, object state, int uid)
    #else
    public void send_retrievePacket(int uid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("retrievePacket", TMessageType.Call, seqid_));
      retrievePacket_args args = new retrievePacket_args();
      args.Uid = uid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public DNHPacket recv_retrievePacket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      retrievePacket_result result = new retrievePacket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrievePacket failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["authenticate"] = authenticate_Process;
      processMap_["sendPacket"] = sendPacket_Process;
      processMap_["retrievePacket"] = retrievePacket_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void authenticate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      authenticate_args args = new authenticate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      authenticate_result result = new authenticate_result();
      result.Success = iface_.authenticate(args.UserName, args.Password);
      oprot.WriteMessageBegin(new TMessage("authenticate", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendPacket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendPacket_args args = new sendPacket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendPacket_result result = new sendPacket_result();
      iface_.sendPacket(args.Packet);
      oprot.WriteMessageBegin(new TMessage("sendPacket", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void retrievePacket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      retrievePacket_args args = new retrievePacket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      retrievePacket_result result = new retrievePacket_result();
      result.Success = iface_.retrievePacket(args.Uid);
      oprot.WriteMessageBegin(new TMessage("retrievePacket", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class authenticate_args : TBase
  {
    private string _userName;
    private string _password;

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userName;
      public bool password;
    }

    public authenticate_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("authenticate_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("authenticate_args(");
      sb.Append("UserName: ");
      sb.Append(UserName);
      sb.Append(",Password: ");
      sb.Append(Password);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class authenticate_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public authenticate_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("authenticate_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("authenticate_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendPacket_args : TBase
  {
    private DNHPacket _packet;

    public DNHPacket Packet
    {
      get
      {
        return _packet;
      }
      set
      {
        __isset.packet = true;
        this._packet = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool packet;
    }

    public sendPacket_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Packet = new DNHPacket();
              Packet.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("sendPacket_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Packet != null && __isset.packet) {
        field.Name = "packet";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Packet.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("sendPacket_args(");
      sb.Append("Packet: ");
      sb.Append(Packet== null ? "<null>" : Packet.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendPacket_result : TBase
  {

    public sendPacket_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("sendPacket_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("sendPacket_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrievePacket_args : TBase
  {
    private int _uid;

    public int Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
    }

    public retrievePacket_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Uid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("retrievePacket_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uid) {
        field.Name = "uid";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Uid);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("retrievePacket_args(");
      sb.Append("Uid: ");
      sb.Append(Uid);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrievePacket_result : TBase
  {
    private DNHPacket _success;

    public DNHPacket Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public retrievePacket_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new DNHPacket();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("retrievePacket_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("retrievePacket_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
