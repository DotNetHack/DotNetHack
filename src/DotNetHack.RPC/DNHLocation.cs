/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class DNHLocation : TBase
{
  private int _X;
  private int _Y;
  private int _Z;

  public int X
  {
    get
    {
      return _X;
    }
    set
    {
      __isset.X = true;
      this._X = value;
    }
  }

  public int Y
  {
    get
    {
      return _Y;
    }
    set
    {
      __isset.Y = true;
      this._Y = value;
    }
  }

  public int Z
  {
    get
    {
      return _Z;
    }
    set
    {
      __isset.Z = true;
      this._Z = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool X;
    public bool Y;
    public bool Z;
  }

  public DNHLocation() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I32) {
            X = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I32) {
            Y = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I32) {
            Z = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("DNHLocation");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.X) {
      field.Name = "X";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(X);
      oprot.WriteFieldEnd();
    }
    if (__isset.Y) {
      field.Name = "Y";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Y);
      oprot.WriteFieldEnd();
    }
    if (__isset.Z) {
      field.Name = "Z";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Z);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("DNHLocation(");
    sb.Append("X: ");
    sb.Append(X);
    sb.Append(",Y: ");
    sb.Append(Y);
    sb.Append(",Z: ");
    sb.Append(Z);
    sb.Append(")");
    return sb.ToString();
  }

}

