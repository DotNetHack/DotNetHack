/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace DotNetHack.RPC
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GameState : TBase
  {
    private List<Player> _players;
    private List<NPC> _npcs;
    private List<Sound> _activeAmbient;
    private List<Message> _messages;

    public List<Player> Players
    {
      get
      {
        return _players;
      }
      set
      {
        __isset.players = true;
        this._players = value;
      }
    }

    public List<NPC> Npcs
    {
      get
      {
        return _npcs;
      }
      set
      {
        __isset.npcs = true;
        this._npcs = value;
      }
    }

    public List<Sound> ActiveAmbient
    {
      get
      {
        return _activeAmbient;
      }
      set
      {
        __isset.activeAmbient = true;
        this._activeAmbient = value;
      }
    }

    public List<Message> Messages
    {
      get
      {
        return _messages;
      }
      set
      {
        __isset.messages = true;
        this._messages = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool players;
      public bool npcs;
      public bool activeAmbient;
      public bool messages;
    }

    public GameState() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Players = new List<Player>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  Player _elem10 = new Player();
                  _elem10 = new Player();
                  _elem10.Read(iprot);
                  Players.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Npcs = new List<NPC>();
                TList _list11 = iprot.ReadListBegin();
                for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                {
                  NPC _elem13 = new NPC();
                  _elem13 = new NPC();
                  _elem13.Read(iprot);
                  Npcs.Add(_elem13);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                ActiveAmbient = new List<Sound>();
                TList _list14 = iprot.ReadListBegin();
                for( int _i15 = 0; _i15 < _list14.Count; ++_i15)
                {
                  Sound _elem16 = new Sound();
                  _elem16 = new Sound();
                  _elem16.Read(iprot);
                  ActiveAmbient.Add(_elem16);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Messages = new List<Message>();
                TList _list17 = iprot.ReadListBegin();
                for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                {
                  Message _elem19 = new Message();
                  _elem19 = new Message();
                  _elem19.Read(iprot);
                  Messages.Add(_elem19);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GameState");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Players != null && __isset.players) {
        field.Name = "players";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Players.Count));
          foreach (Player _iter20 in Players)
          {
            _iter20.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Npcs != null && __isset.npcs) {
        field.Name = "npcs";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Npcs.Count));
          foreach (NPC _iter21 in Npcs)
          {
            _iter21.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ActiveAmbient != null && __isset.activeAmbient) {
        field.Name = "activeAmbient";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ActiveAmbient.Count));
          foreach (Sound _iter22 in ActiveAmbient)
          {
            _iter22.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Messages != null && __isset.messages) {
        field.Name = "messages";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Messages.Count));
          foreach (Message _iter23 in Messages)
          {
            _iter23.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GameState(");
      sb.Append("Players: ");
      sb.Append(Players);
      sb.Append(",Npcs: ");
      sb.Append(Npcs);
      sb.Append(",ActiveAmbient: ");
      sb.Append(ActiveAmbient);
      sb.Append(",Messages: ");
      sb.Append(Messages);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
